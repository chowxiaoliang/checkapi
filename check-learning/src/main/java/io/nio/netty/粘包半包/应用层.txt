滑动窗口

TCP以一个段（segment）为单位，每发送一段就需要进行一次确认应答（ack）处理，但如果这么做，缺点就是包的往返时间越长性能就越差

为了解决这个问题，引入了滑动窗口概念，窗口大小即决定了无需等待应答而可以继续发送的数据最大值

底层：发送缓冲区，接收缓冲区

窗口实际就起到一个缓冲区的作用，同时也能起到流量控制的作用。窗口内的数据才允许被发送，当应答未到达之前，窗口必须停止滑动。
如果1001~2000这个段的数据ack回来了，窗口就可以向前滑动
接收方也会维护一个窗口，只有落在窗口内的数据才能允许接收。


tcp层可能引起粘包半包的原因。

现象分析：
粘包：
现象：发送abc def,接收abcdef
原因：应用层：接收方ByteBuf设置太大（netty默认 1024）
滑动窗口：假设发送方256bytes表示一个完整的报文，但由于接收方处理不及时且窗口大小足够大，这256bytes字节就会在缓冲在接收方的滑动窗口中，
当滑动窗口中缓冲了多个报文就会粘包
Nagle算法：会造成粘包

半包：
现象：发送abcdef，接收abc def
原因：应用层：接收方ByteBuf小于实际发送数据量
滑动窗口：假设接收方的窗口只剩下了128bytes，发送方的报文大小是256bytes，这时就放不下了，只能先发送前128bytes，等到ack返回后才能发送
剩余部分，这就造成了半包
MSS限制：当发送的数据超过MSS限制后，会将数据切分发送，就会造成半包

本质是因为TCP是流式协议，消息无边际。

解决方案：
1.短连接，发送一次关闭一次连接，缺点：解决不了半包问题
2.定长处理器
